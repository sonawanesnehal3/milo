{"version":3,"file":"interlinks-4576d7ff.js","sources":["../../libs/features/interlinks.js"],"sourcesContent":["/**\n * Checks if a given match intersects with an existing match\n * before adding it to the list of matches. In case of an\n * intersection, the more specific (i.e. longer) match wins.\n * @param {array} matches The existing matches\n * @param {object} contender The match to check and add\n * @param {number} maxMatches The maximum number of matches\n */\nexport function checkAndAddMatch(matches, contender, maxMatches) {\n  const collisions = matches\n    // check for intersections\n    .filter((match) => !(contender.end < match.start || contender.start > match.end));\n  if (collisions.length === 0 && matches.length < maxMatches) {\n    // no intersecting existing matches, add contender if max not yet reached\n    matches.push(contender);\n  }\n}\n\n/**\n * Loops through a list of keywords and looks for matches in the article text.\n * The first occurrence of each keyword will be replaced with a link and tracking added.\n * The keywords file must have a column titled \"Keyword\".\n * @param {string} path The location of the keywords file to be used for interlinks.\n * @param {number} limit The maximum amount of keywords to fetch from the file.  Default is 1000.\n */\nexport default async function interlink(path, language, limit = 1000) {\n  const isExceptionLanguage = ['zh', 'ko', 'ja', 'th', 'he'].includes(language);\n  const articleBody = document.querySelector('main');\n  const resp = await fetch(`${path}?limit=${limit}`);\n  if (!(articleBody && resp.ok)) return;\n  const json = await resp.json();\n  const articleText = articleBody.textContent.toLowerCase();\n  // set article link limit: 1 every 100 words\n  const articleLinks = articleBody.querySelectorAll('a').length;\n  const articleWords = articleText.split(/\\s/).length;\n  const maxLinks = (Math.floor(articleWords / 100)) - articleLinks;\n  // eslint-disable-next-line no-useless-return\n  if (maxLinks <= 0) return;\n  const wordBorder = isExceptionLanguage ? '' : '\\\\b';\n  const keywords = (Array.isArray(json) ? json : json.data)\n    // scan article to filter keywords down to relevant ones\n    .filter(({ Keyword }) => articleText.indexOf(Keyword.toLowerCase()) !== -1)\n    // sort matches by length descending\n    .sort((a, b) => b.Keyword.length - a.Keyword.length)\n    // prepare regexps\n    .map((item) => ({\n      regexp: new RegExp(`${wordBorder}(${item.Keyword.replace(/[/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')})${wordBorder}`, 'iu'),\n      ...item,\n    }));\n  // eslint-disable-next-line no-useless-return\n  if (keywords.length === 0) return;\n  // find exact text node matches and insert links\n  articleBody\n    .querySelectorAll('div > p:not([class])')\n    .forEach((p) => {\n      // set paragraph link limit: 1 every 40 words\n      const paraLinks = p.querySelectorAll('a').length;\n      const paraWords = p.textContent.split(/\\s/).length;\n      const maxParaLinks = Math.floor(paraWords / 40) - paraLinks;\n      if (isExceptionLanguage || maxParaLinks > 0) {\n        Array.from(p.childNodes)\n        // filter out non text nodes\n          .filter((node) => node.nodeType === Node.TEXT_NODE)\n          .forEach((textNode) => {\n            const matches = [];\n            // find case-insensitive matches inside text node\n            keywords.forEach((item) => {\n              const match = item.regexp.exec(textNode.nodeValue);\n              if (match) {\n                checkAndAddMatch(matches, {\n                  item,\n                  start: match.index,\n                  end: match.index + item.Keyword.length,\n                }, maxParaLinks);\n              }\n            });\n            matches\n            // sort matches by start index descending\n              .sort((a, b) => b.start - a.start)\n            // split text node, insert link with matched text, and add link tracking\n              .forEach(({ item, start, end }) => {\n                const text = textNode.nodeValue;\n                const a = document.createElement('a');\n                a.title = item.Keyword;\n                a.href = item.URL;\n                a.setAttribute('data-origin', 'interlink');\n                a.setAttribute('daa-ll', `${a.title}--interlinks_p_${item.Keyword}`);\n                a.appendChild(document.createTextNode(text.substring(start, end)));\n                p.insertBefore(a, textNode.nextSibling);\n                p.insertBefore(document.createTextNode(text.substring(end)), a.nextSibling);\n                textNode.nodeValue = text.substring(0, start);\n                // remove matched link from interlinks\n                keywords.splice(keywords.indexOf(item), 1);\n              });\n          });\n      }\n    });\n}\n"],"names":["interlink","path","language","limit","isExceptionLanguage","includes","articleBody","document","querySelector","Promise","resolve","fetch","then","resp","ok","json","articleText","textContent","toLowerCase","articleLinks","querySelectorAll","length","articleWords","split","maxLinks","Math","floor","wordBorder","keywords","Array","isArray","data","filter","Keyword","indexOf","sort","a","b","map","item","regexp","RegExp","replace","forEach","p","paraLinks","paraWords","maxParaLinks","from","childNodes","node","nodeType","Node","TEXT_NODE","textNode","matches","match","exec","nodeValue","checkAndAddMatch","start","index","end","text","createElement","title","href","URL","setAttribute","appendChild","createTextNode","substring","insertBefore","nextSibling","splice","e","reject","contender","maxMatches","collisions","push"],"mappings":"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"}